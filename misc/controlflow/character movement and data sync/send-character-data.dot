digraph controlflow {
    rankdir="LR";
    subgraph cluster_client1 {
        label="Client 1"; labeljust="l";
        subgraph cluster_client1_characters {
            label="characters.gd"; labeljust="l";
            client1_characters__updateAllCharacterData [
                label="<begin>_updateAllCharacterData | {<f0> Loop through all characters  |  { <f1> Set the position for the character  } } | {<f2> For all character data  |  { {<f3> If recipient is me  |  { <f4> Apply data  } } } }"
                shape="record"
            ]
            client1_characters__sendMyCharacterDataToServer [
                label="<begin>_sendMyCharacterDataToServer | <f0> Send own character position\nand custom data to server "
                shape="record"
            ]
        }

    }
    subgraph cluster_server {
        label="Server"; labeljust="l";
        subgraph cluster_server_game {
            label="game.gd"; labeljust="l";
            server_game_setCharacterData [
                label="<begin>setCharacterData | {<f0> Apply character outfit and colors }"
                shape="record"
            ]
        }
        subgraph cluster_server_skeleton {
            label="skeleton.gd"; labeljust="l";
            server_skeleton_applyAppearance [
                label="<begin>applyAppearance | {<f0> If received data valid  |  { <f1> Apply Outfit  | <f2> Apply colors  } }"
                shape="record"
            ]
            server_skeleton__applyOutfit [
                label="<begin>_applyOutfit | {<f0> For each customizable group  |  { <f1> Get the path to the node needing to be set  | <f2> Get the actual node object  | <f3> Set the texture of the node  } }"
                shape="record"
            ]
            server_skeleton__applyColors [
                label="<begin>_applyColors | {<f0> Iterate over each shader  |  { <f1> Sets the correct colors for the shader  | <f2> Applies the colors to the given shader  } }"
                shape="record"
            ]
        }
        subgraph cluster_server_character {
            label="character.gd"; labeljust="l";
            server_character_setAppearance [
                label="<begin>setAppearance | {<f0> For each customizable group  |  { {<f1> For each custom sprite  |  { <f2> Saves sprite file path  } } } } | <f3> Applies appearance to its skeleton "
                shape="record"
            ]
            server_character_setPosition [
                label="<begin>setPosition | {<f0> If movement occured  |  { <f1> Update look direction based on movement  } } | <f2> Set new position "
                shape="record"
            ]
        }
        subgraph cluster_server_characters {
            label="characters.gd"; labeljust="l";
            server_characters__process [
                label="<begin>_process | {<f0> Only proceed if enough time passed } | <f1> Reset position sync timer  | {<f2> If server  |  { <f3> Collect all character positions  | {<f4> Apply received character Data } | <f5> Broadcast all character positions and data  } } | {<f6> If client  |  { <f7> Send own character position to server  } }"
                shape="record"
            ]
            server_characters_receiveCharacterDataServer [
                label="<begin>receiveCharacterDataServer | {<f0> Decompose and compile received data } | <f1> Sets character data for the character requested  | <f2> Save data for broadcast "
                shape="record"
            ]
            server_characters__receiveCharacterDataFromClient [
                label="<begin>_receiveCharacterDataFromClient | <f0> Set character position  | <f1> Handle additional received data "
                shape="record"
            ]
            server_characters__updateCharacterPosition [
                label="<begin>_updateCharacterPosition | {<f0> if position is for own character, exit } | <f1> Set the position for character "
                shape="record"
            ]
        }
        subgraph cluster_server_character_resource {
            label="character_resource.gd"; labeljust="l";
            server_character_resource_setAppearance [
                label="<begin>setAppearance | <f0> Set appearance (deferred) "
                shape="record"
            ]
            server_character_resource_setPosition [
                label="<begin>setPosition | <f0> Set node position "
                shape="record"
            ]
        }

    }
    subgraph cluster_client2 {
        label="Client 2"; labeljust="l";
        subgraph cluster_client2_game {
            label="game.gd"; labeljust="l";
            client2_game_setCharacterData [
                label="<begin>setCharacterData | {<f0> Apply character outfit and colors }"
                shape="record"
            ]
        }
        subgraph cluster_client2_skeleton {
            label="skeleton.gd"; labeljust="l";
            client2_skeleton_applyAppearance [
                label="<begin>applyAppearance | {<f0> If received data valid  |  { <f1> Apply Outfit  | <f2> Apply colors  } }"
                shape="record"
            ]
            client2_skeleton__applyOutfit [
                label="<begin>_applyOutfit | {<f0> For each customizable group  |  { <f1> Get the path to the node needing to be set  | <f2> Get the actual node object  | <f3> Set the texture of the node  } }"
                shape="record"
            ]
            client2_skeleton__applyColors [
                label="<begin>_applyColors | {<f0> Iterate over each shader  |  { <f1> Sets the correct colors for the shader  | <f2> Applies the colors to the given shader  } }"
                shape="record"
            ]
        }
        subgraph cluster_client2_character {
            label="character.gd"; labeljust="l";
            client2_character_setAppearance [
                label="<begin>setAppearance | {<f0> For each customizable group  |  { {<f1> For each custom sprite  |  { <f2> Saves sprite file path  } } } } | <f3> Applies appearance to its skeleton "
                shape="record"
            ]
        }
        subgraph cluster_client2_characters {
            label="characters.gd"; labeljust="l";
            client2_characters__updateAllCharacterData [
                label="<begin>_updateAllCharacterData | {<f0> Loop through all characters  |  { <f1> Set the position for the character  } } | {<f2> For all character data  |  { {<f3> If recipient is me  |  { <f4> Apply data  } } } }"
                shape="record"
            ]
            client2_characters_receiveCharacterDataClient [
                label="<begin>receiveCharacterDataClient | <f0> Set character data on game scene "
                shape="record"
            ]
        }
        subgraph cluster_client2_character_resource {
            label="character_resource.gd"; labeljust="l";
            client2_character_resource_setAppearance [
                label="<begin>setAppearance | <f0> Set appearance (deferred) "
                shape="record"
            ]
        }

    }

    client1_characters__sendMyCharacterDataToServer:f0 -> server_characters__receiveCharacterDataFromClient:begin [color=blue];
    server_characters__receiveCharacterDataFromClient:f0 -> server_characters__updateCharacterPosition:begin;
    server_characters__updateCharacterPosition:f1 -> server_character_resource_setPosition:begin;
    server_character_resource_setPosition:f0 -> server_character_setPosition:begin;
    server_characters__receiveCharacterDataFromClient:f1 -> server_characters_receiveCharacterDataServer:begin;
    server_characters_receiveCharacterDataServer:f1 -> server_game_setCharacterData:begin;
    server_game_setCharacterData:f0 -> server_character_resource_setAppearance:begin;
    server_character_resource_setAppearance:f0 -> server_character_setAppearance:begin [style=dashed];
    server_character_setAppearance:f3 -> server_skeleton_applyAppearance:begin;
    server_skeleton_applyAppearance:f1 -> server_skeleton__applyOutfit:begin;
    server_skeleton_applyAppearance:f2 -> server_skeleton__applyColors:begin;
    server_characters_receiveCharacterDataServer:f2 -> server_characters__process:begin [style=dashed];
    
    server_characters__process:f4 -> server_characters_receiveCharacterDataServer:begin;
    
    server_characters__process:f5 -> client1_characters__updateAllCharacterData:begin [color=red];
    server_characters__process:f5 -> client2_characters__updateAllCharacterData:begin [color=red];
    
    client2_characters__updateAllCharacterData:f4 -> client2_characters_receiveCharacterDataClient:begin;
    client2_characters_receiveCharacterDataClient:f0 -> client2_game_setCharacterData:begin;
    client2_game_setCharacterData:f0 -> client2_character_resource_setAppearance:begin;
    client2_character_resource_setAppearance:f0 -> client2_character_setAppearance:begin [style=dashed];
    client2_character_setAppearance:f3 -> client2_skeleton_applyAppearance:begin;
    client2_skeleton_applyAppearance:f1 -> client2_skeleton__applyOutfit:begin;
    client2_skeleton_applyAppearance:f2 -> client2_skeleton__applyColors:begin;
}
